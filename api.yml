openapi: "3.0.0"
info:
  description: "Métodos disponibles API GoodWayPilgrim"
  version: "1.0.0"
  title: "API GoodWayPilgrim"
paths:
  /pub/register:
    post:
      tags:
      - "user"
      summary: "Adds a new user"
      parameters:
        - name: user
          in: query
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
                description: User name
                example: "Irene"
              surname:
                type: string
                description: User surname
                example: "Sánchez"
              email:
                type: string
                description: User email
                example: "irene@example.com"
              password:
                type: string
                description: User password
                example: "Password1"
      responses:
        "200":
          description: "New user created"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: User id
                    example: 1
                  name:
                    type: string
                    description: User name
                    example: "Irene"
                  surname:
                    type: string
                    description: User surname
                    example: "Sánchez"
                  email:
                    type: string
                    description: User email
                    example: "irene@example.com"
                  password:
                    type: string
                    description: User password
                    example: "Password1"
                example: {'id': '1','name': 'Irene','surname': 'Sánchez', 'email': 'irene@gmail.com', 'password': 'Password1'}
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                type: string
                example: {"message":"Incorrect data recived"}
        "422":
          description: "Invalid input"
          content:
            application/json:
              schema:
                type: string
                example: {"message":"email is already in database"}
  /pub/login:
    post:
      tags:
      - "user"
      summary: "Log in GoodWayPilgrim"
      parameters:
        - name: identification
          in: query
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                description: User email
                example: "irene@example.com"
              password:
                type: string
                description: User password
                example: "Password1"
      responses:
        "200":
          description: "Email and password are correct"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: message
                    example: "success"
                  token:
                    type: string
                    description: personal token
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                example: {'message': 'success','token': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'}
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                type: string
                example: {"message":"Incorrect data recived"}
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                type: string
                example: {"message":"email or password is wrong"}
  /pri/showProfile:
    get:
      tags:
      - "user"
      summary: "Shows personal profile by ID"
      responses:
        "200":
          description: "Shows user resume"
          content:
            application/json:
              schema:
                type: object
                items:
                  type: "object"
                example: {"name":"Irene","surname":"S\u00e1nchez","email":"irene.sanchez@hotmail.com","picture":"","achievements":[{"name":"El glot\u00f3n","description":"Te das un homenaje de comida t\u00edpica","slug":"el-gloton"},{"name":"El sociable","description":"Haces nuevos amigos","slug":"el-sociable"},{"name":"El peregrino","description":"50km. recorridos","slug":"el-peregrino"}],"paths":2,"km":"419.3"}
  /pri/editProfile:
    put:
      tags:
      - "user"
      summary: "Edits the personal profile"
      parameters:
        - name: user
          in: query
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
                description: User name
                example: "Irene"
              surname:
                type: string
                description: User surname
                example: "Sánchez"
              email:
                type: string
                description: User email
                example: "irene@example.com"
              oldPassword:
                type: string
                description: Current password
                example: "Password1"
              newPassword:
                type: string
                description: New password
                example: "passUser"
              picture:
                type: string
                description: New profile picture
                example: ""
      responses:
        "200":
          description: "Shows profile"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: User id
                    example: 1
                  name:
                    type: string
                    description: User name
                    example: "Irene"
                  surname:
                    type: string
                    description: User surname
                    example: "Sánchez"
                  email:
                    type: string
                    description: User email
                    example: "irene@example.com"
                  picture:
                    type: string
                    description: Profile picture
                    example: null
                example: {'id': '1','name': 'Irene','surname': 'Sánchez', 'email': 'irene@gmail.com', 'picture': 'null'}
        "401":
          description: "Invalid input"
          content:
            application/json:
              schema:
                type: string
                example: {"message":"Password is wrong"}
  /pri/deleteProfile:
    delete:
      tags:
      - "user"
      summary: "Deletes user by ID"
      responses:
        "200":
          description: "User deleted"
          content:
            application/json:
              schema:
                type: string
                example: {"message":"success"}
  /pri/AllAchievements:
    get:
      tags:
      - "logros"
      summary: "Shows all available achievements"
      responses:
        "200":
          description: "Shows all"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: "object"
                example: [{"id":"36","name":"Primeros pasos","description":"10km. recorridos"},{"id":"37","name":"Un paseo","description":"20km. recorridos"},{"id":"38","name":"El aventurero","description":"Duermes al aire libre"}]
  /pri/MyAchievements:
    get:
      tags:
      - "logros"
      summary: "Shows user's achievements"
      responses:
        "200":
          description: "Shows achievements that the user has completed"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: "object"
                example: [{"id":"19","id_logro":"36","id_usuario":"76","date":"2018-12-30"},{"id":"20","id_logro":"41","id_usuario":"76","date":"2020-02-05"}]
  /pri/addAchievement:
    put:
      tags:
      - "logros"
      summary: "Adds user achivement by id"      
      parameters:
        - name: achievement
          in: query
          required: true
          schema:
            type: string
        - name: date
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Achivement added"
          content:
            application/json:
              schema:
                type: string
                example: {"message":"success"}
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                type: string
                example: {"message":"Incorrect data recived"}
  /pri/deleteAchievement:
    delete:
      tags:
      - "logros"
      summary: "Deletes user achivement by id"      
      parameters:
        - name: achievement
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Achivement removed"
          content:
            application/json:
              schema:
                type: string
                example: {"message":"success"}
  /pri/deleteAchievements:
    delete:
      tags:
      - "logros"
      summary: "Resets user achievements"
      responses:
        "200":
          description: "Achivement deleted"
          content:
            application/json:
              schema:
                type: string
                example: {"message":"success"}
  /pri/allPaths:
    get:
      tags:
      - "camino"
      summary: "Returns all paths data"
      responses:
        "200":
          description: "Returns an array with an object for each path"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: "object"
                example: [{"id":"41","name":"Camino Franc\u00e9s","num_etapas":"33","description":"El Camino Franc\u00e9s es el Camino de Santiago de mayor relevancia hist\u00f3rica...","start":"Saint Jean de Pied de Port","finish":"Santiago de Compostela","km":"766.2", "etapas":[]},{"id":"42","name":"Camino Primitivo","num_etapas":"14","description":"El Camino Primitivo es el Camino de Santiago que desde Oviedo...","start":"Oviedo","finish":"Santiago de Compostela","km":"307.8", "etapas":[]}] 
 
  /pri/myPaths:
    get:
      tags:
      - "camino"
      summary: "Returns user paths data"
      responses:
        "200":
          description: "Returns an array with an object for each path"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: "object"
                example: [{"id":"47","name":"Camino Primitivo","status":"Completed","etapas":"14"}] 
  /pri/getActivePath:
    get:
      tags:
      - "camino"
      summary: "Returns user active path if it exists"
      responses:
        "200":
          description: "Returns an an object with all the info about user active path including etapas"
          content:
            application/json:
              schema:
                type: object
                items:
                  type: "object"
                example: {"id": "46", "name": "Camino Francés", "num_etapas": "33", "description": "...", "start": "Saint Jean de Pied de Port",  "finish": "Santiago de Compostela", "etapas": [
        {
            "id": "988",
            "km": "24.2",
            "description": "...",
            "start": "Saint Jean Pied de Port",
            "finish": "Roncesvalles"
        },
        {
            "id": "989",
            "km": "21.4",
            "description": "...",
            "start": "Roncesvalles",
            "finish": "Zubiri"
        }]}

  /pri/getEtapasRealizadas:
    get:
      tags:
      - "camino"
      summary: "Devuelve las etapas realizadas por un un usuario en un camino concreto"     
      parameters:
        - name: camino
          in: query
          required: true
          schema:
            type: number
      responses:
        "200":
          description: "Returns an array of etapas"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: "object"
                example: [
    {
        "id": "988",
        "km": "24.2",
        "description": "...",
        "start": "Saint Jean Pied de Port",
        "finish": "Roncesvalles"
    },
    {
        "id": "989",
        "km": "21.4",
        "description": "...",
        "start": "Roncesvalles",
        "finish": "Zubiri"
    },
    {
        "id": "990",
        "km": "20.4",
        "description": "...",
        "start": "Zubiri",
        "finish": "Pamplona"
    },
    {
        "id": "991",
        "km": "23.9",
        "description": "...",
        "start": "Pamplona",
        "finish": "Puente de la Reina"
    }
]
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                type: string
                example: {"message":"Incorrect data recived"}
  /pri/addActivePath:
    post:
      tags:
      - "camino"
      summary: "If there isn't an active path it adds the one given to the DB"     
      parameters:
        - name: camino
          in: query
          required: true
          schema:
            type: string
        - name: start_date
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Active path added"
          content:
            application/json:
              schema:
                type: string
                example: {"message":"success"}
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                type: string
                example: {"message":"Incorrect data recived"}
        "422":
          description: "Invalid input"
          content:
            application/json:
              schema:
                type: string
                example: {"message":"User already has an active path"}
  /pri/archivePath:
    put:
      tags:
      - "camino"
      summary: "Archives a path. User can reactivate it later"     
      parameters:
        - name: camino
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Path archived"
          content:
            application/json:
              schema:
                type: string
                example: {"message":"success"}
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                type: string
                example: {"message":"Incorrect data recived"}
  /pri/finishPath:
    post:
      tags:
      - "camino"
      summary: "Marks a path as finished"     
      parameters:
        - name: camino
          in: query
          required: true
          schema:
            type: string
        - name: finish_date
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Path finished"
          content:
            application/json:
              schema:
                type: string
                example: {"message":"success"}
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                type: string
                example: {"message":"Incorrect data recived"}
  /pri/reactivatePath:
    put:
      tags:
      - "camino"
      summary: "If there isn't an active path it reactivates the one given"     
      parameters:
        - name: camino
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Path reactivated"
          content:
            application/json:
              schema:
                type: string
                example: {"message":"success"}
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                type: string
                example: {"message":"Incorrect data recived"}
        "422":
          description: "Invalid input"
          content:
            application/json:
              schema:
                type: string
                example: {"message":"User already has an active path"}
  /pri/addEtapa:
    post:
      tags:
      - "camino"
      summary: "It adds a Etapa on a specific path for a user"     
      parameters:
        - name: camino
          in: query
          required: true
          schema:
            type: string
        - name: etapa
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Etapa added"
          content:
            application/json:
              schema:
                type: string
                example: {"message":"success"}
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                type: string
                example: {"message":"Incorrect data recived"}                
  /pri/csv_download:
    get:
      tags:
      - "camino"
      summary: "Downloads csv file with caminos' data"
      responses:
        "200":
          description: "File downloaded"
  

